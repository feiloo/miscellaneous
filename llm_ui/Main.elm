-- start generated by Qwen3-235B
module Main exposing (main)

import Browser
import Html exposing (Html, button, div, form, input, li, text, ul)
import Html.Attributes exposing (style, disabled, type_, value)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Decode as Decode
import List exposing (map, append, filter, head)
import Maybe exposing (withDefault)
import Task exposing (Task, perform, succeed)


import Http
import Json.Encode as Encode
import Json.Decode as Decode

type alias ServerMessage = 
    { role : String
    , content : String
    }

-- UPDATE
type Msg
    = Select Int
    | New
    | Input String
    | Submit
    | GotCompletion Int (Result Http.Error Decode.Value)
    | CompletionReceived

bodyEncoder : List ServerMessage -> Encode.Value
bodyEncoder messages =
    Encode.object
        [ ("messages", Encode.list messageEncoder messages)
        , ("stream", Encode.bool False)
        , ("temperature", Encode.float 0.6)
        ]

messageEncoder : ServerMessage -> Encode.Value
messageEncoder msg =
    Encode.object
        [ ("role", Encode.string msg.role)
        , ("content", Encode.string msg.content)
        ]

getCompletionCmd : (Result Http.Error Decode.Value -> Msg) -> List ServerMessage -> Cmd Msg
getCompletionCmd resultToMsg messages =
    Http.post
        { url = "http://localhost:8081/v1/chat/completions"
        , body = Http.jsonBody (bodyEncoder messages)
        , expect = Http.expectJson resultToMsg Decode.value
         }

-- MODEL
type alias Message = 
    { role : Role
    , content : String
    }

type alias Conversation = 
    { id : Int
    , name : String
    , messages : List Message
    }

type Role = User | AI

type alias Model = 
    { conversations : List Conversation
    , selectedId : Maybe Int
    , input : String
    , isLoading : Bool
    , nextId : Int
    , error : String
    }

init : () -> (Model, Cmd Msg)
init _ = 
    ( { conversations = [Conversation 1 "New Chat" []]
      , selectedId = Just 1
      , input = ""
      , isLoading = False
      , nextId = 2
      , error = ""
      }, Cmd.none )

-- UPDATE

update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
    case msg of
        Select id ->
            ({ model | selectedId = Just id }, Cmd.none)

        New ->
            let
                newConv = Conversation model.nextId "New Chat" []
                updated = { model 
                    | conversations = append model.conversations [newConv]
                    , selectedId = Just model.nextId
                    , nextId = model.nextId + 1 }
            in (updated, Cmd.none)

        Input text ->
            ({ model | input = text }, Cmd.none)

        Submit ->
            case model.selectedId of
                Just id ->
                    let
                        updatedConvs = updateSelectedConv (\c -> 
                            { c | messages = append c.messages [Message User model.input] }) model
                        newModel = { model 
                            | conversations = updatedConvs
                            , input = ""
                            , isLoading = True
                            , error = "" }

                        convToSend = withDefault (Conversation 0 "" []) (
                            head (filter (\c -> c.id == id) updatedConvs))
                        convertedMessages = map convertToServerMessage convToSend.messages
                    in
                    (newModel, getCompletionCmd (GotCompletion id) convertedMessages)

                Nothing ->
                    (model, Cmd.none)

        GotCompletion id (Ok value) ->
            case decodeCompletion value of
                Ok content ->
                    let
                        updatedConvs = updateConversationWithAI id content model.conversations
                    in
                    ({ model | conversations = updatedConvs, isLoading = False }, 
                     Cmd.none)

                Err err ->
                    ({ model | error = err, isLoading = False }, Cmd.none)

        GotCompletion _ (Err error) ->
            ({ model | error = httpErrorToString error, isLoading = False }, Cmd.none)

        _ ->
            (model, Cmd.none)

-- TYPE CONVERSIONS
convertToServerMessage : Message -> ServerMessage
convertToServerMessage msg =
    let
        roleStr = 
            case msg.role of
                User -> "user"
                AI -> "assistant"
    in
    { role = roleStr, content = msg.content }

-- JSON DECODER
decodeCompletion : D.Value -> Result String String
decodeCompletion value =
    case D.decodeValue (D.at ["choices", "0", "message", "content"] D.string) value of
        Ok content -> Ok content
        Err err -> Err (D.errorToString err)

httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url -> "Bad URL: " ++ url
        Http.Timeout -> "Request timed out"
        Http.NetworkError -> "Network error"
        Http.BadStatus status -> "Bad status code: " ++ String.fromInt status
        Http.BadBody body -> "Server error: " ++ body

-- VIEW STYLING
view : Model -> Html Msg
view model =
    div [ style "display" "flex", style "height" "100vh" ]
        [ sidebar model
        , chatView model
        ]

sidebar : Model -> Html Msg
sidebar model =
    div 
        [ style "width" "250px"
        , style "border-right" "1px solid #ccc"
        , style "padding" "10px"
        ]
        [ button 
            [ onClick New
            , style "margin-bottom" "10px"
            , style "width" "100%"
            , style "padding" "8px 12px"
            ] 
            [ text "New Chat" ]
        , ul [] (map (\c -> li 
                [ onClick (Select c.id)
                , style "cursor" "pointer"
                , style "margin" "5px 0"
                , style "padding" "8px"
                , style "background-color" (if Just c.id == model.selectedId then "#f0f0f0" else "#fff")
                ] 
                [ text c.name ]) 
            model.conversations)
        ]

chatView : Model -> Html Msg
chatView model =
    case model.selectedId of
        Just id ->
            let
                conv = withDefault (Conversation 0 "" []) (
                    head (filter (\c -> c.id == id) model.conversations))
            in
            div 
                [ style "flex" "1"
                , style "display" "flex"
                , style "flex-direction" "column"
                ]
                [ messagesView conv.messages
                , div [ style "color" "red" ] [ text model.error ]
                , form 
                    [ onSubmit Submit
                    , style "display" "flex"
                    , style "margin-top" "10px"
                    ] 
                    [ input 
                        [ value model.input
                        , onInput Input
                        , disabled model.isLoading
                        , style "flex" "1"
                        , style "padding" "8px"
                        , style "border" "1px solid #ccc"
                        , style "margin-right" "5px"
                        ] 
                        []
                    , button 
                        [ type_ "submit"
                        , disabled (String.isEmpty model.input || model.isLoading)
                        , style "padding" "8px 16px"
                        , style "background-color" "#007bff"
                        , style "color" "white"
                        , style "border" "none"
                        , style "cursor" "pointer"
                        ] 
                        [ text "Send" ]
                    ]
                ]

        Nothing ->
            text "Select a conversation"

messagesView : List Message -> Html Msg
messagesView messages =
    div 
        [ style "flex" "1"
        , style "overflow-y" "auto"
        , style "display" "flex"
        , style "flex-direction" "column"
        ] 
        (map messageView messages)

messageView : Message -> Html Msg
messageView msg =
    let
        alignment = 
            case msg.role of
                User -> "flex-end"
                AI -> "flex-start"

        bgColor = 
            case msg.role of
                User -> "#d1e7dd"
                AI -> "#f8d7da"
    in
    div 
        [ style "margin" "5px 0"
        , style "padding" "10px"
        , style "border-radius" "8px"
        , style "max-width" "70%"
        , style "word-wrap" "break-word"
        , style "align-self" alignment
        , style "background-color" bgColor
        ] 
        [ text msg.content ]

-- HELPERS
updateSelectedConv : (Conversation -> Conversation) -> Model -> List Conversation
updateSelectedConv updateFn model =
    case model.selectedId of
        Just id ->
            map (\c -> if c.id == id then updateFn c else c) model.conversations
        Nothing ->
            model.conversations

updateConversationWithAI : Int -> String -> List Conversation -> List Conversation
updateConversationWithAI id content convs =
    map (\c -> 
        if c.id == id then 
            { c | messages = append c.messages [Message AI content] }
        else 
            c) convs

-- MAIN
main : Program () Model Msg
main = Browser.element 
    { init = init
    , update = update
    , view = view
    , subscriptions = always Sub.none 
    }

-- end generated by Qwen3-235B
